{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Instagram Download Button","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.instagram.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1716629345332,"data":{}},"enabled":true,"position":1,"file_url":"https://update.greasyfork.org/scripts/406535/Instagram%20Download%20Button.user.js","uuid":"87d353f2-1bc5-472a-8599-8798e9031012","source":""},{"name":"Facebook video downloader","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.facebook.com/*","https://web.facebook.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1716631064564,"data":{}},"enabled":true,"position":2,"file_url":"https://update.greasyfork.org/scripts/477748/Facebook%20video%20downloader.user.js","uuid":"d36ecfb5-4f33-44e5-94b1-8e2c80998450","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEZhY2Vib29rIHZpZGVvIGRvd25sb2FkZXIKLy8gQGljb24gICAgICAgIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9mYXZpY29uLmljbwovLyBAbmFtZXNwYWNlICAgVmlvbGVudG1vbmtleSBTY3JpcHRzCi8vIEBtYXRjaCAgICAgICBodHRwczovL3d3dy5mYWNlYm9vay5jb20vKgovLyBAbWF0Y2ggICAgICAgaHR0cHM6Ly93ZWIuZmFjZWJvb2suY29tLyoKLy8gQGdyYW50ICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQKLy8gQHZlcnNpb24gICAgIDEuMwovLyBAYXV0aG9yICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0hvYW5nVHJhbjA0MTAKLy8gQGRlc2NyaXB0aW9uIERvd25sb2FkIGFueSB2aWRlbyBvbiBGYWNlYm9vayAocG9zdC9jaGF0L2NvbW1lbnQpCi8vIEBsaWNlbnNlIE1JVAovLyBAZG93bmxvYWRVUkwgaHR0cHM6Ly91cGRhdGUuZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy80Nzc3NDgvRmFjZWJvb2slMjB2aWRlbyUyMGRvd25sb2FkZXIudXNlci5qcwovLyBAdXBkYXRlVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDc3NzQ4L0ZhY2Vib29rJTIwdmlkZW8lMjBkb3dubG9hZGVyLm1ldGEuanMKLy8gPT0vVXNlclNjcmlwdD09CgooKCkgPT4gewogIGZ1bmN0aW9uIGdldE92ZXJsYXBTY29yZShlbCkgewogICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgIHJldHVybiAoCiAgICAgIE1hdGgubWluKAogICAgICAgIHJlY3QuYm90dG9tLAogICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0CiAgICAgICkgLSBNYXRoLm1heCgwLCByZWN0LnRvcCkKICAgICk7CiAgfQoKICBmdW5jdGlvbiBnZXRWaWRlb0lkRnJvbVZpZGVvRWxlbWVudCh2aWRlbykgewogICAgdHJ5IHsKICAgICAgZm9yIChsZXQgayBpbiB2aWRlby5wYXJlbnRFbGVtZW50KSB7CiAgICAgICAgaWYgKGsuc3RhcnRzV2l0aCgiX19yZWFjdFByb3BzIikpIHsKICAgICAgICAgIHJldHVybiB2aWRlby5wYXJlbnRFbGVtZW50W2tdLmNoaWxkcmVuLnByb3BzLnZpZGVvRkJJRDsKICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQoKICBhc3luYyBmdW5jdGlvbiBnZXRXYXRjaGluZ1ZpZGVvSWQoKSB7CiAgICBsZXQgYWxsVmlkZW9zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJ2aWRlbyIpKTsKICAgIGxldCByZXN1bHQgPSBbXTsKCiAgICBmb3IgKGxldCB2aWRlbyBvZiBhbGxWaWRlb3MpIHsKICAgICAgbGV0IHZpZGVvSWQgPSBnZXRWaWRlb0lkRnJvbVZpZGVvRWxlbWVudCh2aWRlbyk7CiAgICAgIGlmICh2aWRlb0lkKSB7CiAgICAgICAgcmVzdWx0LnB1c2goewogICAgICAgICAgdmlkZW9JZCwKICAgICAgICAgIG92ZXJsYXBTY29yZTogZ2V0T3ZlcmxhcFNjb3JlKHZpZGVvKSwKICAgICAgICAgIHBsYXlpbmc6ICEhKAogICAgICAgICAgICB2aWRlby5jdXJyZW50VGltZSA+IDAgJiYKICAgICAgICAgICAgIXZpZGVvLnBhdXNlZCAmJgogICAgICAgICAgICAhdmlkZW8uZW5kZWQgJiYKICAgICAgICAgICAgdmlkZW8ucmVhZHlTdGF0ZSA+IDIKICAgICAgICAgICksCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBpZiB0aGVyZSBpcyBwbGF5aW5nIHZpZGVvID0+IHJldHVybiB0aGF0CiAgICBsZXQgcGxheWluZ1ZpZGVvID0gcmVzdWx0LmZpbmQoKF8pID0+IF8ucGxheWluZyk7CiAgICBpZiAocGxheWluZ1ZpZGVvKSByZXR1cm4gW3BsYXlpbmdWaWRlby52aWRlb0lkXTsKCiAgICAvLyBlbHNlIHJldHVybiBhbGwgdmlkZW9zIGluLXZpZXdwb3J0CiAgICByZXR1cm4gcmVzdWx0CiAgICAgIC5maWx0ZXIoKF8pID0+IF8udmlkZW9JZCAmJiAoXy5vdmVybGFwU2NvcmUgPiAwIHx8IF8ucGxheWluZykpCiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLm92ZXJsYXBTY29yZSAtIGEub3ZlcmxhcFNjb3JlKQogICAgICAubWFwKChfKSA9PiBfLnZpZGVvSWQpOwogIH0KCiAgYXN5bmMgZnVuY3Rpb24gZ2V0VmlkZW9VcmxGcm9tVmlkZW9JZCh2aWRlb0lkKSB7CiAgICBsZXQgZHRzZyA9IGF3YWl0IGdldER0c2coKTsKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBnZXRMaW5rRmJWaWRlbzIodmlkZW9JZCwgZHRzZyk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBhd2FpdCBnZXRMaW5rRmJWaWRlbzEodmlkZW9JZCwgZHRzZyk7CiAgICB9CiAgfQoKICBhc3luYyBmdW5jdGlvbiBnZXRMaW5rRmJWaWRlbzIodmlkZW9JZCwgZHRzZykgewogICAgbGV0IHJlcyA9IGF3YWl0IGZldGNoKAogICAgICAiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3ZpZGVvL3ZpZGVvX2RhdGFfYXN5bmMvP3ZpZGVvX2lkPSIgKyB2aWRlb0lkLAogICAgICB7CiAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgaGVhZGVyczogeyAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIgfSwKICAgICAgICBib2R5OiBzdHJpbmdpZnlWYXJpYWJsZXMoewogICAgICAgICAgX19hOiAiMSIsCiAgICAgICAgICBmYl9kdHNnOiBkdHNnLAogICAgICAgIH0pLAogICAgICB9CiAgICApOwoKICAgIGxldCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTsKICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoImZvciAoOzspOyIsICIiKTsKICAgIGxldCBqc29uID0gSlNPTi5wYXJzZSh0ZXh0KTsKCiAgICBjb25zdCB7IGhkX3NyYywgaGRfc3JjX25vX3JhdGVsaW1pdCwgc2Rfc3JjLCBzZF9zcmNfbm9fcmF0ZWxpbWl0IH0gPQogICAgICBqc29uPy5wYXlsb2FkIHx8IHt9OwoKICAgIHJldHVybiBoZF9zcmNfbm9fcmF0ZWxpbWl0IHx8IGhkX3NyYyB8fCBzZF9zcmNfbm9fcmF0ZWxpbWl0IHx8IHNkX3NyYzsKICB9CgogIGFzeW5jIGZ1bmN0aW9uIGdldExpbmtGYlZpZGVvMSh2aWRlb0lkLCBkdHNnKSB7CiAgICBsZXQgcmVzID0gYXdhaXQgZmV0Y2hHcmFwaFFsKCI1Mjc5NDc2MDcyMTYxNjM0IiwgewogICAgICBVRkkyQ29tbWVudHNQcm92aWRlcl9jb21tZW50c0tleTogIkNvbWV0VGFob2VTaWRlUGFuZVF1ZXJ5IiwKICAgICAgY2FsbGVyOiAiQ0hBTk5FTF9WSUVXX0ZST01fUEFHRV9USU1FTElORSIsCiAgICAgIGRpc3BsYXlDb21tZW50c0NvbnRleHRFbmFibGVDb21tZW50OiBudWxsLAogICAgICBkaXNwbGF5Q29tbWVudHNDb250ZXh0SXNBZFByZXZpZXc6IG51bGwsCiAgICAgIGRpc3BsYXlDb21tZW50c0NvbnRleHRJc0FnZ3JlZ2F0ZWRTaGFyZTogbnVsbCwKICAgICAgZGlzcGxheUNvbW1lbnRzQ29udGV4dElzU3RvcnlTZXQ6IG51bGwsCiAgICAgIGRpc3BsYXlDb21tZW50c0ZlZWRiYWNrQ29udGV4dDogbnVsbCwKICAgICAgZmVlZGJhY2tTb3VyY2U6IDQxLAogICAgICBmZWVkTG9jYXRpb246ICJUQUhPRSIsCiAgICAgIGZvY3VzQ29tbWVudElEOiBudWxsLAogICAgICBwcml2YWN5U2VsZWN0b3JSZW5kZXJMb2NhdGlvbjogIkNPTUVUX1NUUkVBTSIsCiAgICAgIHJlbmRlckxvY2F0aW9uOiAidmlkZW9fY2hhbm5lbCIsCiAgICAgIHNjYWxlOiAxLAogICAgICBzdHJlYW1DaGFpbmluZ1NlY3Rpb246ICExLAogICAgICB1c2VEZWZhdWx0QWN0b3I6ICExLAogICAgICB2aWRlb0NoYWluaW5nQ29udGV4dDogbnVsbCwKICAgICAgdmlkZW9JRDogdmlkZW9JZCwKICAgIH0sIGR0c2cpOwogICAgbGV0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpOwoKICAgIGxldCBhID0gSlNPTi5wYXJzZSh0ZXh0LnNwbGl0KCJcbiIpWzBdKSwKICAgICAgbGluayA9IGEuZGF0YS52aWRlby5wbGF5YWJsZV91cmxfcXVhbGl0eV9oZCB8fCBhLmRhdGEudmlkZW8ucGxheWFibGVfdXJsOwoKICAgIHJldHVybiBsaW5rOwogIH0KCiAgZnVuY3Rpb24gZmV0Y2hHcmFwaFFsKGRvY19pZCwgdmFyaWFibGVzLCBkdHNnKSB7CiAgICByZXR1cm4gZmV0Y2goImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9hcGkvZ3JhcGhxbC8iLCB7CiAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICBoZWFkZXJzOiB7CiAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLAogICAgICB9LAogICAgICBib2R5OiBzdHJpbmdpZnlWYXJpYWJsZXMoewogICAgICAgIGRvY19pZDogZG9jX2lkLAogICAgICAgIHZhcmlhYmxlczogSlNPTi5zdHJpbmdpZnkodmFyaWFibGVzKSwKICAgICAgICBmYl9kdHNnOiBkdHNnLAogICAgICAgIHNlcnZlcl90aW1lc3RhbXBzOiAhMCwKICAgICAgfSksCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHN0cmluZ2lmeVZhcmlhYmxlcyhkLCBlKSB7CiAgICBsZXQgZiA9IFtdLAogICAgICBhOwogICAgZm9yIChhIGluIGQpCiAgICAgIGlmIChkLmhhc093blByb3BlcnR5KGEpKSB7CiAgICAgICAgbGV0IGcgPSBlID8gZSArICJbIiArIGEgKyAiXSIgOiBhLAogICAgICAgICAgYiA9IGRbYV07CiAgICAgICAgZi5wdXNoKAogICAgICAgICAgbnVsbCAhPT0gYiAmJiAib2JqZWN0IiA9PSB0eXBlb2YgYgogICAgICAgICAgICA/IHN0cmluZ2lmeVZhcmlhYmxlcyhiLCBnKQogICAgICAgICAgICA6IGVuY29kZVVSSUNvbXBvbmVudChnKSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChiKQogICAgICAgICk7CiAgICAgIH0KICAgIHJldHVybiBmLmpvaW4oIiYiKTsKICB9CgogIGFzeW5jIGZ1bmN0aW9uIGdldER0c2coKSB7CiAgICByZXR1cm4gcmVxdWlyZSgiRFRTR0luaXRpYWxEYXRhIikudG9rZW47CiAgfQoKICBmdW5jdGlvbiBkb3dubG9hZFVSTCh1cmwsIG5hbWUpIHsKICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgbGluay50YXJnZXQgPSAiX2JsYW5rIjsKICAgIGxpbmsuZG93bmxvYWQgPSBuYW1lOwogICAgbGluay5ocmVmID0gdXJsOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsKICAgIGxpbmsuY2xpY2soKTsKICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7CiAgfQoKICBhc3luYyBmdW5jdGlvbiBkb3dubG9hZFdhdGNoaW5nVmlkZW8oKSB7CiAgICB0cnkgewogICAgICBsZXQgbGlzdFZpZGVvSWQgPSBhd2FpdCBnZXRXYXRjaGluZ1ZpZGVvSWQoKTsKICAgICAgaWYgKCFsaXN0VmlkZW9JZD8ubGVuZ3RoID4gMCkgdGhyb3cgRXJyb3IoIk5vIHZpZGVvIGZvdW5kIGluIHRoZSBwYWdlIik7CgogICAgICBjb25zb2xlLmxvZyhsaXN0VmlkZW9JZCkKCiAgICAgIGZvciAobGV0IHZpZGVvSWQgb2YgbGlzdFZpZGVvSWQpIHsKICAgICAgICBsZXQgdmlkZW9VcmwgPSBhd2FpdCBnZXRWaWRlb1VybEZyb21WaWRlb0lkKHZpZGVvSWQpOwogICAgICAgIGlmICh2aWRlb1VybCkgZG93bmxvYWRVUkwodmlkZW9VcmwsICJmYl92aWRlby5tcDQiKTsKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICBhbGVydCgiRVJST1I6ICIgKyBlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlc2lzdGVyTWVudUNvbW1hbmQoKSB7CiAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kKCJEb3dubG9hZCB3YXRjaGluZyB2aWRlbyIsIGRvd25sb2FkV2F0Y2hpbmdWaWRlbyk7CiAgfQoKICByZXNpc3Rlck1lbnVDb21tYW5kKCk7Cn0pKCk7Cg=="},{"name":"Twitter Media Downloader","options":{"check_for_updates":true,"user_modified":1721340828091,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://twitter.com/*","https://x.com/*","https://mobile.twitter.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1736407307209,"data":{"show_sensitive":"btrue","filename":"stwitter_{user-name}(@{user-id})_{date-time}_{status-id}_{file-type}","download_history":"o[\"1814932915173589364\",\"1814933538619470237\",\"1814941973381587188\",\"1814931785425559977\",\"1814960033479762403\",\"1816389526950170725\",\"1816486525481431136\",\"1816419501044605404\",\"1816392280284299462\",\"1646475564981817344\",\"1816761095266398389\",\"1816464348484624706\",\"1817462498901320045\",\"1817504869005352977\",\"1817465490148835534\",\"1817497297409966511\",\"1817867421832860121\",\"1554474110931341314\",\"1598476185423425536\",\"1786698791812563241\",\"1819723224906887549\",\"1652336047408414720\",\"1824225516402119163\",\"1824227973660053983\",\"1824673774861529450\",\"1824743591383912777\",\"1826260743429533954\",\"1827392003124150444\",\"1829109552186298401\",\"1829094484396687384\",\"1829133302453743703\",\"1832418814182748558\",\"1833056444767142387\",\"1833766868680683562\",\"1833824431493562849\",\"1823058099466576147\",\"1834068213312921707\",\"1831709428212756664\",\"1837471653061669239\",\"1837443669944947095\",\"1836774603408232646\",\"1836364537257439351\",\"1838570726694986189\",\"1843274541025595801\",\"1845814308175020191\",\"1862828212029632599\",\"1862802494738641299\",\"1861766190487789946\",\"1860687464278712466\",\"1859873370780860725\",\"1863349605456650679\",\"1864551056476402061\",\"1858892294046576992\",\"1867781563871899750\",\"1867538450796495175\",\"1877224518256668954\"]"}},"enabled":true,"position":3,"file_url":"https://update.greasyfork.org/scripts/423001/Twitter%20Media%20Downloader.user.js","uuid":"08863cde-4ebf-463c-8bcf-382b50c74d57","source":""},{"name":"Download Weibo Images & Videos (Only support new version weibo UI)","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://weibo.com/*","https://www.weibo.com/*","https://s.weibo.com/weibo*","https://s.weibo.com/realtime*","https://s.weibo.com/video*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["https://weibo.com/tv/*","https://www.weibo.com/tv/*","https://weibo.com/p/*","https://www.weibo.com/p/*"],"merge_excludes":true,"use_connects":[],"orig_connects":["weibo.com","www.weibo.com","sinaimg.cn","weibocdn.com","localhost"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1732106100794,"data":{"dlFileName":"s{original}.{ext}","retweetMode":"bfalse","retweetFileName":"s{original}.{ext}","zipMode":"bfalse","packFileName":"s{mblogid}.zip","retweetPackFileName":"s{mblogid}.zip","ariaMode":"bfalse","ariaRpcUrl":"shttp://localhost:6800/jsonrpc","isSet":"n1","dlVidCov":"btrue","rmWtrMrk":"btrue"}},"enabled":false,"position":4,"file_url":"https://update.greasyfork.org/scripts/430877/Download%20Weibo%20Images%20%20Videos%20%28Only%20support%20new%20version%20weibo%20UI%29.user.js","uuid":"d6f63deb-f084-4fec-be99-6efaaea4f371","source":"","requires":[{"meta":{"name":"jszip.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.9.1/jszip.min.js","ts":1728754649680,"mimetype":"text/javascript"},"source":""}]},{"name":"贴吧页面精简","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":["*://tieba.baidu.com/*","*://dq.tieba.com/*","*://jump2.bdimg.com/*","*://jump.bdimg.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://tieba.baidu.com/f/fdir*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-body","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1733530213527,"data":{"version":"s2.8.0"}},"enabled":true,"position":5,"file_url":"https://update.greasyfork.org/scripts/23687/%E8%B4%B4%E5%90%A7%E9%A1%B5%E9%9D%A2%E7%B2%BE%E7%AE%80.user.js","uuid":"05335ee8-693d-4538-93d3-f60ff1ee14bf","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js","ts":1733530083228,"mimetype":"text/javascript"},"source":""}]},{"name":"网盘直链下载助手","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/disk/main*","*://yun.baidu.com/disk/main*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/*","*://yun.baidu.com/share/*","*://openapi.baidu.com/*","*://www.aliyundrive.com/s/*","*://www.aliyundrive.com/drive*","*://www.alipan.com/s/*","*://www.alipan.com/drive*","*://cloud.189.cn/web/*","*://pan.xunlei.com/*","*://pan.quark.cn/*","*://yun.139.com/*","*://caiyun.139.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["baidu.com","baidupcs.com","aliyundrive.com","alipan.com","189.cn","xunlei.com","quark.cn","youxiaohou.com","yun.139.com","caiyun.139.com","localhost","*"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1747729144347,"data":{"setting_rpc_domain":"shttp://localhost","setting_rpc_port":"s16800","setting_rpc_path":"s/jsonrpc","setting_rpc_token":"s","setting_rpc_dir":"sD:","setting_terminal_type":"swc","setting_theme_color":"s#09AAFF","setting_init_code":"s865746","license":"sAGPL3","baidu_access_token":"s123.6fd85ed5b131394e4b6fd6a485fcc911.YDLJ98aEcavUFck7gloZ79iKpSNu52RA_qrwbkT.c92aZA"}},"enabled":true,"position":6,"file_url":"https://www.youxiaohou.com/panlinker.user.js","uuid":"23e52944-ef9f-4bfb-a986-1135623b5fa3","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://unpkg.com/jquery@3.7.0/dist/jquery.min.js","ts":1734258410921,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert2.all.min.js","url":"https://unpkg.com/sweetalert2@10.16.6/dist/sweetalert2.all.min.js","ts":1734258410656,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"md5.min.js","url":"https://unpkg.com/js-md5@0.7.3/build/md5.min.js","ts":1734258410848,"mimetype":"text/javascript"},"source":""}]},{"name":"音视频增强脚本：无极调速|倍速快学|快乐刷剧|视频下载|画面截图等「适用大部分网站」","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://yiyan.baidu.com/*","*://*.bing.com/search*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753533597812,"data":{"_h5player_lastContactRemoteHelperTime":"n1737288583714","_global_id_":"n13089","__monkeyMsgBroadcast__":"o{\"data\": {},\"tabId\": 11541,\"title\": \"Release SRBMiner-MULTI v2.9.4 · doktor83/SRBMiner-Multi · GitHub\",\"referrer\": {\"href\": \"https://github.com/doktor83/SRBMiner-Multi/releases/tag/2.9.4\",\"origin\": \"https://github.com\",\"protocol\": \"https:\",\"host\": \"github.com\",\"hostname\": \"github.com\",\"port\": \"\",\"pathname\": \"/doktor83/SRBMiner-Multi/releases/tag/2.9.4\",\"search\": \"\",\"hash\": \"\"},\"updateTime\": 1764734371397}","_h5player_enhance_allowExperimentFeatures":"btrue","globalKeydownEvent":"o{\"data\": {\"isTrusted\": true,\"charCode\": 0,\"keyCode\": 39,\"altKey\": false,\"ctrlKey\": false,\"shiftKey\": false,\"metaKey\": false,\"location\": 0,\"repeat\": false,\"isComposing\": false,\"key\": \"ArrowRight\",\"code\": \"ArrowRight\",\"DOM_KEY_LOCATION_STANDARD\": 0,\"DOM_KEY_LOCATION_LEFT\": 1,\"DOM_KEY_LOCATION_RIGHT\": 2,\"DOM_KEY_LOCATION_NUMPAD\": 3,\"DOM_VK_CANCEL\": 3,\"DOM_VK_HELP\": 6,\"DOM_VK_BACK_SPACE\": 8,\"DOM_VK_TAB\": 9,\"DOM_VK_CLEAR\": 12,\"DOM_VK_RETURN\": 13,\"DOM_VK_SHIFT\": 16,\"DOM_VK_CONTROL\": 17,\"DOM_VK_ALT\": 18,\"DOM_VK_PAUSE\": 19,\"DOM_VK_CAPS_LOCK\": 20,\"DOM_VK_KANA\": 21,\"DOM_VK_HANGUL\": 21,\"DOM_VK_EISU\": 22,\"DOM_VK_JUNJA\": 23,\"DOM_VK_FINAL\": 24,\"DOM_VK_HANJA\": 25,\"DOM_VK_KANJI\": 25,\"DOM_VK_ESCAPE\": 27,\"DOM_VK_CONVERT\": 28,\"DOM_VK_NONCONVERT\": 29,\"DOM_VK_ACCEPT\": 30,\"DOM_VK_MODECHANGE\": 31,\"DOM_VK_SPACE\": 32,\"DOM_VK_PAGE_UP\": 33,\"DOM_VK_PAGE_DOWN\": 34,\"DOM_VK_END\": 35,\"DOM_VK_HOME\": 36,\"DOM_VK_LEFT\": 37,\"DOM_VK_UP\": 38,\"DOM_VK_RIGHT\": 39,\"DOM_VK_DOWN\": 40,\"DOM_VK_SELECT\": 41,\"DOM_VK_PRINT\": 42,\"DOM_VK_EXECUTE\": 43,\"DOM_VK_PRINTSCREEN\": 44,\"DOM_VK_INSERT\": 45,\"DOM_VK_DELETE\": 46,\"DOM_VK_0\": 48,\"DOM_VK_1\": 49,\"DOM_VK_2\": 50,\"DOM_VK_3\": 51,\"DOM_VK_4\": 52,\"DOM_VK_5\": 53,\"DOM_VK_6\": 54,\"DOM_VK_7\": 55,\"DOM_VK_8\": 56,\"DOM_VK_9\": 57,\"DOM_VK_COLON\": 58,\"DOM_VK_SEMICOLON\": 59,\"DOM_VK_LESS_THAN\": 60,\"DOM_VK_EQUALS\": 61,\"DOM_VK_GREATER_THAN\": 62,\"DOM_VK_QUESTION_MARK\": 63,\"DOM_VK_AT\": 64,\"DOM_VK_A\": 65,\"DOM_VK_B\": 66,\"DOM_VK_C\": 67,\"DOM_VK_D\": 68,\"DOM_VK_E\": 69,\"DOM_VK_F\": 70,\"DOM_VK_G\": 71,\"DOM_VK_H\": 72,\"DOM_VK_I\": 73,\"DOM_VK_J\": 74,\"DOM_VK_K\": 75,\"DOM_VK_L\": 76,\"DOM_VK_M\": 77,\"DOM_VK_N\": 78,\"DOM_VK_O\": 79,\"DOM_VK_P\": 80,\"DOM_VK_Q\": 81,\"DOM_VK_R\": 82,\"DOM_VK_S\": 83,\"DOM_VK_T\": 84,\"DOM_VK_U\": 85,\"DOM_VK_V\": 86,\"DOM_VK_W\": 87,\"DOM_VK_X\": 88,\"DOM_VK_Y\": 89,\"DOM_VK_Z\": 90,\"DOM_VK_WIN\": 91,\"DOM_VK_CONTEXT_MENU\": 93,\"DOM_VK_SLEEP\": 95,\"DOM_VK_NUMPAD0\": 96,\"DOM_VK_NUMPAD1\": 97,\"DOM_VK_NUMPAD2\": 98,\"DOM_VK_NUMPAD3\": 99,\"DOM_VK_NUMPAD4\": 100,\"DOM_VK_NUMPAD5\": 101,\"DOM_VK_NUMPAD6\": 102,\"DOM_VK_NUMPAD7\": 103,\"DOM_VK_NUMPAD8\": 104,\"DOM_VK_NUMPAD9\": 105,\"DOM_VK_MULTIPLY\": 106,\"DOM_VK_ADD\": 107,\"DOM_VK_SEPARATOR\": 108,\"DOM_VK_SUBTRACT\": 109,\"DOM_VK_DECIMAL\": 110,\"DOM_VK_DIVIDE\": 111,\"DOM_VK_F1\": 112,\"DOM_VK_F2\": 113,\"DOM_VK_F3\": 114,\"DOM_VK_F4\": 115,\"DOM_VK_F5\": 116,\"DOM_VK_F6\": 117,\"DOM_VK_F7\": 118,\"DOM_VK_F8\": 119,\"DOM_VK_F9\": 120,\"DOM_VK_F10\": 121,\"DOM_VK_F11\": 122,\"DOM_VK_F12\": 123,\"DOM_VK_F13\": 124,\"DOM_VK_F14\": 125,\"DOM_VK_F15\": 126,\"DOM_VK_F16\": 127,\"DOM_VK_F17\": 128,\"DOM_VK_F18\": 129,\"DOM_VK_F19\": 130,\"DOM_VK_F20\": 131,\"DOM_VK_F21\": 132,\"DOM_VK_F22\": 133,\"DOM_VK_F23\": 134,\"DOM_VK_F24\": 135,\"DOM_VK_NUM_LOCK\": 144,\"DOM_VK_SCROLL_LOCK\": 145,\"DOM_VK_WIN_OEM_FJ_JISHO\": 146,\"DOM_VK_WIN_OEM_FJ_MASSHOU\": 147,\"DOM_VK_WIN_OEM_FJ_TOUROKU\": 148,\"DOM_VK_WIN_OEM_FJ_LOYA\": 149,\"DOM_VK_WIN_OEM_FJ_ROYA\": 150,\"DOM_VK_CIRCUMFLEX\": 160,\"DOM_VK_EXCLAMATION\": 161,\"DOM_VK_DOUBLE_QUOTE\": 162,\"DOM_VK_HASH\": 163,\"DOM_VK_DOLLAR\": 164,\"DOM_VK_PERCENT\": 165,\"DOM_VK_AMPERSAND\": 166,\"DOM_VK_UNDERSCORE\": 167,\"DOM_VK_OPEN_PAREN\": 168,\"DOM_VK_CLOSE_PAREN\": 169,\"DOM_VK_ASTERISK\": 170,\"DOM_VK_PLUS\": 171,\"DOM_VK_PIPE\": 172,\"DOM_VK_HYPHEN_MINUS\": 173,\"DOM_VK_OPEN_CURLY_BRACKET\": 174,\"DOM_VK_CLOSE_CURLY_BRACKET\": 175,\"DOM_VK_TILDE\": 176,\"DOM_VK_VOLUME_MUTE\": 181,\"DOM_VK_VOLUME_DOWN\": 182,\"DOM_VK_VOLUME_UP\": 183,\"DOM_VK_COMMA\": 188,\"DOM_VK_PERIOD\": 190,\"DOM_VK_SLASH\": 191,\"DOM_VK_BACK_QUOTE\": 192,\"DOM_VK_OPEN_BRACKET\": 219,\"DOM_VK_BACK_SLASH\": 220,\"DOM_VK_CLOSE_BRACKET\": 221,\"DOM_VK_QUOTE\": 222,\"DOM_VK_META\": 224,\"DOM_VK_ALTGR\": 225,\"DOM_VK_WIN_ICO_HELP\": 227,\"DOM_VK_WIN_ICO_00\": 228,\"DOM_VK_PROCESSKEY\": 229,\"DOM_VK_WIN_ICO_CLEAR\": 230,\"DOM_VK_WIN_OEM_RESET\": 233,\"DOM_VK_WIN_OEM_JUMP\": 234,\"DOM_VK_WIN_OEM_PA1\": 235,\"DOM_VK_WIN_OEM_PA2\": 236,\"DOM_VK_WIN_OEM_PA3\": 237,\"DOM_VK_WIN_OEM_WSCTRL\": 238,\"DOM_VK_WIN_OEM_CUSEL\": 239,\"DOM_VK_WIN_OEM_ATTN\": 240,\"DOM_VK_WIN_OEM_FINISH\": 241,\"DOM_VK_WIN_OEM_COPY\": 242,\"DOM_VK_WIN_OEM_AUTO\": 243,\"DOM_VK_WIN_OEM_ENLW\": 244,\"DOM_VK_WIN_OEM_BACKTAB\": 245,\"DOM_VK_ATTN\": 246,\"DOM_VK_CRSEL\": 247,\"DOM_VK_EXSEL\": 248,\"DOM_VK_EREOF\": 249,\"DOM_VK_PLAY\": 250,\"DOM_VK_ZOOM\": 251,\"DOM_VK_PA1\": 253,\"DOM_VK_WIN_OEM_CLEAR\": 254,\"detail\": 0,\"layerX\": 0,\"layerY\": 0,\"which\": 39,\"rangeOffset\": 0,\"SCROLL_PAGE_UP\": -32768,\"SCROLL_PAGE_DOWN\": 32768,\"type\": \"keydown\",\"eventPhase\": 1,\"bubbles\": true,\"cancelable\": true,\"returnValue\": true,\"defaultPrevented\": false,\"composed\": true,\"timeStamp\": 4364628,\"cancelBubble\": false,\"NONE\": 0,\"CAPTURING_PHASE\": 1,\"AT_TARGET\": 2,\"BUBBLING_PHASE\": 3,\"ALT_MASK\": 1,\"CONTROL_MASK\": 2,\"SHIFT_MASK\": 4,\"META_MASK\": 8},\"tabId\": 13067,\"title\": \"Dark Myth Wuchang : Fallen Kong - YouTube\",\"referrer\": {\"href\": \"https://www.youtube.com/watch?v=J93E6_w5f0o\",\"origin\": \"https://www.youtube.com\",\"protocol\": \"https:\",\"host\": \"www.youtube.com\",\"hostname\": \"www.youtube.com\",\"port\": \"\",\"pathname\": \"/watch\",\"search\": \"?v=J93E6_w5f0o\",\"hash\": \"\"},\"updateTime\": 1753533282020}","_h5player_recommendList":"o[{\"title\": \"【Free GPT-4】Provided by the overseas team of ByteDance\",\"url\": \"https://u.anzz.top/ai\",\"i18n\": {\"zh\": {\"title\": \"【免费GPT-4】由字节跳动海外团队提供\",\"url\": \"https://u.anzz.top/h5precommend\"}},\"disabled\": true},{\"title\": \"【make.com】From tasks and workflows to apps and systems, build and automate anything in one powerful visual platform.\",\"url\": \"https://www.make.com/en/register?pc=ankvps\",\"lang\": [\"en\"],\"i18n\": {},\"disabled\": false},{\"title\": \"【薅羊毛】Claude 3、GPT-4o、Stable Diffusion、DALL·E等免费用30天\",\"desc\": \"使用作者的邀请链接，可获得更多免费额度！！\",\"url\": \"https://u.anzz.top/anakinai\",\"i18n\": {\"en\": {\"title\": \"【Free trial】Claude 3, GPT-4, Stable Diffusion, DALL·E, etc. are free for 30 days\",\"desc\": \"Use the author's invitation link to get more free quota!!\",\"url\": \"https://u.anzz.top/h5precommend\"}},\"disabled\": true},{\"title\": \"【合租平台】一站式账号合租、购买平台：美区Apple ID、GPT-Plus、Netflix、Disney+ 等应有尽有\",\"url\": \"https://universalbus.cn?s=04l91CIddv\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【共享员工】“共享员工”火了，各位牛马怎么看？\",\"url\": \"https://u.anzz.top/996\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【交流群】程序员：待业、副业、灵活就业交流基地\",\"url\": \"https://u.anzz.top/996chatgroup\",\"lang\": [\"zh\"]},{\"title\": \"【内测】微信私人小助理 [人工智杖版🤖]\",\"url\": \"https://anzz.flowus.cn/share/c35d8cee-c5d3-44cb-813d-0c43e702ce59\",\"lang\": [\"zh\"]},{\"title\": \"【科学上网】便宜稳定的上网工具，支持ChatGPT、Netflix、YouTube、TikTok等\",\"url\": \"https://lingdianyun20.xyz/auth/register?code=sblF\",\"lang\": [\"zh\"]},{\"title\": \"【梯子】亚洲优质稳定VPN，支持ChatGPT、Netflix、YouTube、TikTok等\",\"url\": \"https://www.bygcloud.com/#/register?code=kV2kxp8W\",\"lang\": [\"zh\"]},{\"title\": \"幻兽帕鲁联机服务器，一键部署搭建\",\"url\": \"https://developer.aliyun.com/topic/ecs/huanshou?userCode=5khxr0dt\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【阿里云服务器】新用户低价特惠活动，2核2G3M最低61元包年\",\"url\": \"https://www.aliyun.com/daily-act/ecs/activity_selection?userCode=5khxr0dt\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【腾讯云服务器】新用户低价特惠活动，2核2G4M最低99元包年\",\"url\": \"https://curl.qcloud.com/SNJPPDGR\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【AI编程插件】AI编程助理，开发提效！\",\"url\": \"https://u.anzz.top/comate\",\"desc\": \"使用作者的邀请链接，可获得更多积分！！\",\"lang\": [\"zh\"],\"disabled\": false},{\"title\": \"【无需翻墙】GPT-4o 永久会员498元，每天可对话999次\",\"url\": \"https://u.anzz.top/huluai02\",\"lang\": [\"zh\"]},{\"title\": \"【无需翻墙】GPT-4o + Midjourney 永久会员498元\",\"url\": \"https://u.anzz.top/huluai02\",\"lang\": [\"zh\"],\"disabled\": true},{\"title\": \"【AI Supermarket】Aggregating all kinds of AI products, one-stop purchase\",\"url\": \"https://gpt302.saaslink.net/FgFheK\",\"i18n\": {\"zh\": {\"title\": \"【AI超市】聚合各类AI产品，一站式购买\"}}},{\"title\": \"100万级安装量的开源作品，一年有多少打赏收入？\",\"url\": \"https://u.anzz.top/aboutdonate\",\"i18n\": {\"en\": {\"title\": \"How much reward income does an open source work with 1 million installations generate in a year?\",\"url\": \"https://github.com/xxxily/h5player/blob/master/docs/home/aboutDonate-en.md\"}}},{\"title\": \"音视频一键合并工具，无需二次编码\",\"url\": \"https://github.com/xxxily/ffmpeg-script\",\"desc\": \"将h5player下载到的音视频文件自动合并成一个文件，不经过二次编码，可快速合并\",\"i18n\": {\"en\": {\"title\": \"Audio and video merge tool, no secondary coding required\",\"desc\": \"Automatically merge the audio and video files downloaded by h5player into one file without secondary coding, which can be quickly merged\"}},\"disabled\": true}]","_h5player_remoteHelperSyncInterval":"n14400000","_h5player_contactRemoteHelperSuccessTime":"n1736016487466","_h5player_enhance_unfoldMenu":"btrue","_h5player_blacklist_domains":"o[\"challenges.cloudflare.com\",\"www.douyin.com\",\"mail.google.com\",\"www.binance.com\",\"accounts.google.com\"]","_h5player_hotkeys":"o[{\"desc\": \"网页全屏\",\"key\": \"shift+enter\",\"command\": \"setWebFullScreen\",\"disabled\": true},{\"desc\": \"全屏\",\"key\": \"enter\",\"command\": \"setFullScreen\",\"disabled\": true},{\"desc\": \"切换画中画模式\",\"key\": \"shift+p\",\"command\": \"togglePictureInPicture\",\"disabled\": false},{\"desc\": \"视频截图\",\"key\": \"\\\\\",\"command\": \"capture\",\"disabled\": false},{\"desc\": \"启用或禁止自动恢复播放进度功能\",\"key\": \"shift+r\",\"command\": \"switchRestorePlayProgressStatus\",\"disabled\": true},{\"desc\": \"垂直镜像翻转\",\"key\": \"shift+m\",\"command\": \"setMirror\",\"args\": [true],\"disabled\": true},{\"desc\": \"水平镜像翻转\",\"key\": \"m\",\"command\": \"setMirror\",\"disabled\": true},{\"desc\": \"下载音视频文件（实验性功能）\",\"key\": \"*\",\"command\": \"mediaDownload\",\"disabled\": false},{\"desc\": \"缩小视频画面 -0.05\",\"key\": \"shift+x\",\"command\": \"setScaleDown\",\"args\": -0.05,\"disabled\": true},{\"desc\": \"放大视频画面 +0.05\",\"key\": \"shift+c\",\"command\": \"setScaleUp\",\"args\": 0.05,\"disabled\": true},{\"desc\": \"恢复视频画面\",\"key\": \"shift+z\",\"command\": \"resetTransform\",\"disabled\": true},{\"desc\": \"画面向右移动10px\",\"key\": \"shift+arrowright\",\"command\": \"setTranslateRight\",\"args\": 10,\"disabled\": true},{\"desc\": \"画面向左移动10px\",\"key\": \"shift+arrowleft\",\"command\": \"setTranslateLeft\",\"args\": -10,\"disabled\": true},{\"desc\": \"画面向上移动10px\",\"key\": \"shift+arrowup\",\"command\": \"setTranslateUp\",\"args\": 10,\"disabled\": true},{\"desc\": \"画面向下移动10px\",\"key\": \"shift+arrowdown\",\"command\": \"setTranslateDown\",\"args\": -10,\"disabled\": true},{\"desc\": \"前进5秒\",\"key\": \"arrowright\",\"command\": \"setCurrentTimeUp\",\"args\": 5,\"disabled\": false},{\"desc\": \"后退5秒\",\"key\": \"arrowleft\",\"command\": \"setCurrentTimeDown\",\"args\": -5,\"disabled\": false},{\"desc\": \"前进30秒\",\"key\": \"ctrl+arrowright\",\"command\": \"setCurrentTimeUp\",\"args\": [30],\"disabled\": false},{\"desc\": \"后退30秒\",\"key\": \"ctrl+arrowleft\",\"command\": \"setCurrentTimeDown\",\"args\": [-30],\"disabled\": false},{\"desc\": \"音量升高 5%\",\"key\": \"arrowup\",\"command\": \"setVolumeUp\",\"args\": [0.05],\"disabled\": false},{\"desc\": \"音量降低 5%\",\"key\": \"arrowdown\",\"command\": \"setVolumeDown\",\"args\": [-0.05],\"disabled\": false},{\"desc\": \"音量升高 20%\",\"key\": \"ctrl+arrowup\",\"command\": \"setVolumeUp\",\"args\": [0.2],\"disabled\": false},{\"desc\": \"音量降低 20%\",\"key\": \"ctrl+arrowdown\",\"command\": \"setVolumeDown\",\"args\": [-0.2],\"disabled\": false},{\"desc\": \"切换暂停/播放\",\"key\": \"space\",\"command\": \"switchPlayStatus\",\"disabled\": false},{\"desc\": \"减速播放\",\"key\": \"[\",\"command\": \"setPlaybackRateDown\",\"args\": -0.2,\"disabled\": false},{\"desc\": \"加速播放\",\"key\": \"]\",\"command\": \"setPlaybackRateUp\",\"args\": 0.2,\"disabled\": false},{\"desc\": \"正常速度播放\",\"key\": 0,\"command\": \"resetPlaybackRate\",\"disabled\": false},{\"desc\": \"设置1x的播放速度\",\"key\": \"Digit1\",\"command\": \"setPlaybackRatePlus\",\"args\": 1,\"disabled\": true},{\"desc\": \"设置1x的播放速度\",\"key\": \"Numpad1\",\"command\": \"setPlaybackRatePlus\",\"args\": 1,\"disabled\": true},{\"desc\": \"设置2x的播放速度\",\"key\": \"Digit2\",\"command\": \"setPlaybackRatePlus\",\"args\": 2,\"disabled\": true},{\"desc\": \"设置2x的播放速度\",\"key\": \"Numpad2\",\"command\": \"setPlaybackRatePlus\",\"args\": 2,\"disabled\": true},{\"desc\": \"设置3x的播放速度\",\"key\": \"Digit3\",\"command\": \"setPlaybackRatePlus\",\"args\": 3,\"disabled\": true},{\"desc\": \"设置3x的播放速度\",\"key\": \"Numpad3\",\"command\": \"setPlaybackRatePlus\",\"args\": 3,\"disabled\": true},{\"desc\": \"设置4x的播放速度\",\"key\": \"Digit4\",\"command\": \"setPlaybackRatePlus\",\"args\": 4,\"disabled\": true},{\"desc\": \"设置4x的播放速度\",\"key\": \"Numpad4\",\"command\": \"setPlaybackRatePlus\",\"args\": 4,\"disabled\": true},{\"desc\": \"下一帧\",\"key\": \"=\",\"command\": \"freezeFrame\",\"args\": 1,\"disabled\": false},{\"desc\": \"上一帧\",\"key\": \"-\",\"command\": \"freezeFrame\",\"args\": -1,\"disabled\": false},{\"desc\": \"增加亮度\",\"key\": \"E\",\"command\": \"setBrightnessUp\",\"disabled\": true},{\"desc\": \"减少亮度\",\"key\": \"W\",\"command\": \"setBrightnessDown\",\"disabled\": true},{\"desc\": \"增加对比度\",\"key\": \"T\",\"command\": \"setContrastUp\",\"disabled\": true},{\"desc\": \"减少对比度\",\"key\": \"R\",\"command\": \"setContrastDown\",\"disabled\": true},{\"desc\": \"增加饱和度\",\"key\": \"U\",\"command\": \"setSaturationUp\",\"disabled\": true},{\"desc\": \"减少饱和度\",\"key\": \"Y\",\"command\": \"setSaturationDown\",\"disabled\": true},{\"desc\": \"增加色相\",\"key\": \"O\",\"command\": \"setHueUp\",\"disabled\": true},{\"desc\": \"减少色相\",\"key\": \"I\",\"command\": \"setHueDown\",\"disabled\": true},{\"desc\": \"模糊增加 1 px\",\"key\": \"K\",\"command\": \"setBlurUp\",\"disabled\": true},{\"desc\": \"模糊减少 1 px\",\"key\": \"J\",\"command\": \"setBlurDown\",\"disabled\": true},{\"desc\": \"图像复位\",\"key\": \"Q\",\"command\": \"resetFilterAndTransform\",\"disabled\": true},{\"desc\": \"画面旋转 90 度\",\"key\": \"S\",\"command\": \"setRotate\",\"disabled\": true},{\"desc\": \"播放下一集\",\"key\": \"N\",\"command\": \"setNextVideo\",\"disabled\": true},{\"desc\": \"插入debugger断点\",\"key\": \"ctrl+shift+alt+d\",\"command\": \"debuggerNow\",\"disabled\": true},{\"desc\": \"执行JS脚本\",\"key\": \"ctrl+j ctrl+s\",\"when\": \"\",\"disabled\": true}]","_h5player_blacklist_urls":"o[\"https://www.bilibili.com/\"]","_h5player_media_playbackRate":"n1.8","videoDetected":"o{\"data\": {\"src\": \"\"},\"tabId\": 13060,\"title\": \"YouTube\",\"referrer\": {\"href\": \"https://www.youtube.com/embed/oMY5ZdgHulc?feature=oembed\",\"origin\": \"https://www.youtube.com\",\"protocol\": \"https:\",\"host\": \"www.youtube.com\",\"hostname\": \"www.youtube.com\",\"port\": \"\",\"pathname\": \"/embed/oMY5ZdgHulc\",\"search\": \"?feature=oembed\",\"hash\": \"\"},\"updateTime\": 1753526384112}","_h5player_ui_enable":"bfalse","h5player_openTab_https://u.anzz.top/h5pjsoneditor":"n1744993204691","_h5player_enhance_allowExternalCustomConfiguration":"btrue","h5player_openTab_https://h5player.anzz.top":"n1753533231233","h5player_openTab_https://h5player.anzz.top/tools/json-editor/index.html?mode=tree&saveHandlerName=saveH5PlayerConfig&expandAll=true&json=":"n1751531366324"}},"enabled":true,"position":7,"file_url":"https://update.greasyfork.org/scripts/381682/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%A2%9E%E5%BC%BA%E8%84%9A%E6%9C%AC%EF%BC%9A%E6%97%A0%E6%9E%81%E8%B0%83%E9%80%9F%7C%E5%80%8D%E9%80%9F%E5%BF%AB%E5%AD%A6%7C%E5%BF%AB%E4%B9%90%E5%88%B7%E5%89%A7%7C%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%7C%E7%94%BB%E9%9D%A2%E6%88%AA%E5%9B%BE%E7%AD%89%E3%80%8C%E9%80%82%E7%94%A8%E5%A4%A7%E9%83%A8%E5%88%86%E7%BD%91%E7%AB%99%E3%80%8D.user.js","uuid":"d281c3a7-8b46-4ecc-93bd-10714cc34df5","source":""}]}